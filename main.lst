   1               		.file	"main.c"
   2               	__SP_L__ = 0x3d
   3               	__SREG__ = 0x3f
   4               	__tmp_reg__ = 0
   5               	__zero_reg__ = 1
   6               		.text
   7               	.Ltext0:
   8               		.cfi_sections	.debug_frame
   9               	.global	clearFrame
  11               	clearFrame:
  12               	.LFB6:
  13               		.file 1 "main.c"
   1:main.c        **** #include <util/delay.h>
   2:main.c        **** #include <avr/io.h>
   3:main.c        **** #include <avr/interrupt.h>
   4:main.c        **** #include "ws2812/light/light_ws2812.h"
   5:main.c        **** 
   6:main.c        **** #define NUM_LEDS	8
   7:main.c        **** 
   8:main.c        **** 
   9:main.c        **** 
  10:main.c        **** /*
  11:main.c        **** 
  12:main.c        **** LED-Layout:
  13:main.c        **** 
  14:main.c        **** 6>		<7
  15:main.c        **** 
  16:main.c        **** 
  17:main.c        **** |5|		|0|
  18:main.c        **** 
  19:main.c        **** |4|		|1|
  20:main.c        **** 
  21:main.c        **** |3|		|2|
  22:main.c        **** 
  23:main.c        **** 
  24:main.c        **** */
  25:main.c        **** 
  26:main.c        **** struct cRGB ledFrame[NUM_LEDS];
  27:main.c        **** 
  28:main.c        **** 
  29:main.c        **** void clearFrame() {
  14               		.loc 1 29 0
  15               		.cfi_startproc
  16               	/* prologue: function */
  17               	/* frame size = 0 */
  18               	/* stack size = 0 */
  19               	.L__stack_usage = 0
  20               	.LVL0:
  21               		.loc 1 29 0
  22 0000 80E0      		ldi r24,0
  23 0002 90E0      		ldi r25,0
  24               	.LVL1:
  25               	.L2:
  26 0004 FC01      		movw r30,r24
  27 0006 E050      		subi r30,lo8(-(ledFrame))
  28 0008 F040      		sbci r31,hi8(-(ledFrame))
  29               	.LBB24:
  30:main.c        **** 	for (int i = 0; i < NUM_LEDS; i++) ledFrame[i].r = ledFrame[i].g = ledFrame[i].b = 0;
  30               		.loc 1 30 0 discriminator 3
  31 000a 1282      		std Z+2,__zero_reg__
  32 000c 1082      		st Z,__zero_reg__
  33 000e 1182      		std Z+1,__zero_reg__
  34 0010 0396      		adiw r24,3
  35 0012 8831      		cpi r24,24
  36 0014 9105      		cpc r25,__zero_reg__
  37 0016 01F4      		brne .L2
  38               	/* epilogue start */
  39               	.LBE24:
  31:main.c        **** }
  40               		.loc 1 31 0
  41 0018 0895      		ret
  42               		.cfi_endproc
  43               	.LFE6:
  45               	.global	playStartAnimation
  47               	playStartAnimation:
  48               	.LFB7:
  32:main.c        **** 
  33:main.c        **** 
  34:main.c        **** void playStartAnimation() {
  49               		.loc 1 34 0
  50               		.cfi_startproc
  51 001a 1F93      		push r17
  52               	.LCFI0:
  53               		.cfi_def_cfa_offset 3
  54               		.cfi_offset 17, -2
  55 001c CF93      		push r28
  56               	.LCFI1:
  57               		.cfi_def_cfa_offset 4
  58               		.cfi_offset 28, -3
  59 001e DF93      		push r29
  60               	.LCFI2:
  61               		.cfi_def_cfa_offset 5
  62               		.cfi_offset 29, -4
  63               	/* prologue: function */
  64               	/* frame size = 0 */
  65               	/* stack size = 3 */
  66               	.L__stack_usage = 3
  35:main.c        **** 	
  36:main.c        **** 	//frame 1: bottom red
  37:main.c        **** 	ledFrame[2].r = ledFrame[3].r = 50;
  67               		.loc 1 37 0
  68 0020 C0E0      		ldi r28,lo8(ledFrame)
  69 0022 D0E0      		ldi r29,hi8(ledFrame)
  70 0024 12E3      		ldi r17,lo8(50)
  71 0026 1A87      		std Y+10,r17
  72 0028 1F83      		std Y+7,r17
  38:main.c        **** 	
  39:main.c        **** 	ws2812_setleds(ledFrame, NUM_LEDS);
  73               		.loc 1 39 0
  74 002a 68E0      		ldi r22,lo8(8)
  75 002c 70E0      		ldi r23,0
  76 002e CE01      		movw r24,r28
  77 0030 00D0      		rcall ws2812_setleds
  78               	.LVL2:
  79               	.LBB25:
  80               	.LBB26:
  81               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  82               		.loc 2 163 0
  83 0032 2FEF      		ldi r18,lo8(959999)
  84 0034 85EA      		ldi r24,hi8(959999)
  85 0036 9EE0      		ldi r25,hlo8(959999)
  86 0038 2150      	1:	subi r18,1
  87 003a 8040      		sbci r24,0
  88 003c 9040      		sbci r25,0
  89 003e 01F4      		brne 1b
  90 0040 00C0      		rjmp .
  91 0042 0000      		nop
  92               	.LBE26:
  93               	.LBE25:
  40:main.c        **** 	_delay_ms(500);
  41:main.c        **** 	
  42:main.c        **** 	//frame2: bottom yellow, middle red
  43:main.c        **** 	ledFrame[1].r = ledFrame[4].r = 50;
  94               		.loc 1 43 0
  95 0044 1D87      		std Y+13,r17
  96 0046 1C83      		std Y+4,r17
  44:main.c        **** 	ledFrame[2].g = ledFrame[3].g = 50;
  97               		.loc 1 44 0
  98 0048 1987      		std Y+9,r17
  99 004a 1E83      		std Y+6,r17
  45:main.c        **** 	
  46:main.c        **** 	ws2812_setleds(ledFrame, NUM_LEDS);
 100               		.loc 1 46 0
 101 004c 68E0      		ldi r22,lo8(8)
 102 004e 70E0      		ldi r23,0
 103 0050 CE01      		movw r24,r28
 104 0052 00D0      		rcall ws2812_setleds
 105               	.LVL3:
 106               	.LBB27:
 107               	.LBB28:
 108               		.loc 2 163 0
 109 0054 2FEF      		ldi r18,lo8(959999)
 110 0056 85EA      		ldi r24,hi8(959999)
 111 0058 9EE0      		ldi r25,hlo8(959999)
 112 005a 2150      	1:	subi r18,1
 113 005c 8040      		sbci r24,0
 114 005e 9040      		sbci r25,0
 115 0060 01F4      		brne 1b
 116 0062 00C0      		rjmp .
 117 0064 0000      		nop
 118               	.LBE28:
 119               	.LBE27:
  47:main.c        **** 	_delay_ms(500);
  48:main.c        **** 	
  49:main.c        **** 	//frame3: bottom green, middle yellow, top red
  50:main.c        **** 	ledFrame[0].r = ledFrame[5].r = 50;
 120               		.loc 1 50 0
 121 0066 188B      		std Y+16,r17
 122 0068 1983      		std Y+1,r17
  51:main.c        **** 	ledFrame[1].g = ledFrame[4].g = 50;
 123               		.loc 1 51 0
 124 006a 1C87      		std Y+12,r17
 125 006c 1B83      		std Y+3,r17
  52:main.c        **** 	ledFrame[2].r = ledFrame[3].r = 0;
 126               		.loc 1 52 0
 127 006e 1A86      		std Y+10,__zero_reg__
 128 0070 1F82      		std Y+7,__zero_reg__
  53:main.c        **** 	
  54:main.c        **** 	ws2812_setleds(ledFrame, NUM_LEDS);
 129               		.loc 1 54 0
 130 0072 68E0      		ldi r22,lo8(8)
 131 0074 70E0      		ldi r23,0
 132 0076 CE01      		movw r24,r28
 133 0078 00D0      		rcall ws2812_setleds
 134               	.LVL4:
 135               	.LBB29:
 136               	.LBB30:
 137               		.loc 2 163 0
 138 007a 2FEF      		ldi r18,lo8(1919999)
 139 007c 8BE4      		ldi r24,hi8(1919999)
 140 007e 9DE1      		ldi r25,hlo8(1919999)
 141 0080 2150      	1:	subi r18,1
 142 0082 8040      		sbci r24,0
 143 0084 9040      		sbci r25,0
 144 0086 01F4      		brne 1b
 145 0088 00C0      		rjmp .
 146 008a 0000      		nop
 147               	.LBE30:
 148               	.LBE29:
  55:main.c        **** 	_delay_ms(1000);
  56:main.c        **** 	
  57:main.c        **** 	//frame4: same as frame3, but text blue
  58:main.c        **** 	ledFrame[6].b = ledFrame[7].b = 250;
 149               		.loc 1 58 0
 150 008c 8AEF      		ldi r24,lo8(-6)
 151 008e 8F8B      		std Y+23,r24
 152 0090 8C8B      		std Y+20,r24
  59:main.c        **** 	
  60:main.c        **** 	ws2812_setleds(ledFrame, NUM_LEDS);
 153               		.loc 1 60 0
 154 0092 68E0      		ldi r22,lo8(8)
 155 0094 70E0      		ldi r23,0
 156 0096 CE01      		movw r24,r28
 157               	/* epilogue start */
  61:main.c        **** 
  62:main.c        **** }
 158               		.loc 1 62 0
 159 0098 DF91      		pop r29
 160 009a CF91      		pop r28
 161 009c 1F91      		pop r17
  60:main.c        **** 
 162               		.loc 1 60 0
 163 009e 00C0      		rjmp ws2812_setleds
 164               	.LVL5:
 165               		.cfi_endproc
 166               	.LFE7:
 168               	.global	pulseVibration
 170               	pulseVibration:
 171               	.LFB8:
  63:main.c        **** 
  64:main.c        **** 
  65:main.c        **** void pulseVibration() {
 172               		.loc 1 65 0
 173               		.cfi_startproc
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 0 */
 177               	.L__stack_usage = 0
  66:main.c        **** 
  67:main.c        **** 	PORTB |= (1<<PORTB4);
 178               		.loc 1 67 0
 179 00a0 C49A      		sbi 0x18,4
 180               	.LVL6:
 181               	.LBB31:
 182               	.LBB32:
 183               		.loc 2 163 0
 184 00a2 2FEF      		ldi r18,lo8(383999)
 185 00a4 8BED      		ldi r24,hi8(383999)
 186 00a6 95E0      		ldi r25,hlo8(383999)
 187 00a8 2150      	1:	subi r18,1
 188 00aa 8040      		sbci r24,0
 189 00ac 9040      		sbci r25,0
 190 00ae 01F4      		brne 1b
 191 00b0 00C0      		rjmp .
 192 00b2 0000      		nop
 193               	.LBE32:
 194               	.LBE31:
  68:main.c        **** 	
  69:main.c        **** 	_delay_ms(200);
  70:main.c        **** 	
  71:main.c        **** 	PORTB &= ~(1<<PORTB4);
 195               		.loc 1 71 0
 196 00b4 C498      		cbi 0x18,4
 197 00b6 0895      		ret
 198               		.cfi_endproc
 199               	.LFE8:
 201               	.global	pulseVibrationShort
 203               	pulseVibrationShort:
 204               	.LFB9:
  72:main.c        **** 
  73:main.c        **** }
  74:main.c        **** 
  75:main.c        **** void pulseVibrationShort() {
 205               		.loc 1 75 0
 206               		.cfi_startproc
 207               	/* prologue: function */
 208               	/* frame size = 0 */
 209               	/* stack size = 0 */
 210               	.L__stack_usage = 0
  76:main.c        **** 
  77:main.c        **** 	PORTB |= (1<<PORTB4);
 211               		.loc 1 77 0
 212 00b8 C49A      		sbi 0x18,4
 213               	.LVL7:
 214               	.LBB33:
 215               	.LBB34:
 216               		.loc 2 163 0
 217 00ba 2FEF      		ldi r18,lo8(191999)
 218 00bc 8DEE      		ldi r24,hi8(191999)
 219 00be 92E0      		ldi r25,hlo8(191999)
 220 00c0 2150      	1:	subi r18,1
 221 00c2 8040      		sbci r24,0
 222 00c4 9040      		sbci r25,0
 223 00c6 01F4      		brne 1b
 224 00c8 00C0      		rjmp .
 225 00ca 0000      		nop
 226               	.LBE34:
 227               	.LBE33:
  78:main.c        **** 	
  79:main.c        **** 	_delay_ms(100);
  80:main.c        **** 	
  81:main.c        **** 	PORTB &= ~(1<<PORTB4);
 228               		.loc 1 81 0
 229 00cc C498      		cbi 0x18,4
 230 00ce 0895      		ret
 231               		.cfi_endproc
 232               	.LFE9:
 234               	.global	turnOff
 236               	turnOff:
 237               	.LFB10:
  82:main.c        **** 
  83:main.c        **** }
  84:main.c        **** 
  85:main.c        **** 
  86:main.c        **** void turnOff() {
 238               		.loc 1 86 0
 239               		.cfi_startproc
 240               	/* prologue: function */
 241               	/* frame size = 0 */
 242               	/* stack size = 0 */
 243               	.L__stack_usage = 0
  87:main.c        **** 
  88:main.c        **** 	PORTB |= (1<<PORTB3);
 244               		.loc 1 88 0
 245 00d0 C39A      		sbi 0x18,3
 246               	.LVL8:
 247               	.LBB35:
 248               	.LBB36:
 249               		.loc 2 163 0
 250 00d2 2FEF      		ldi r18,lo8(479999)
 251 00d4 82E5      		ldi r24,hi8(479999)
 252 00d6 97E0      		ldi r25,hlo8(479999)
 253 00d8 2150      	1:	subi r18,1
 254 00da 8040      		sbci r24,0
 255 00dc 9040      		sbci r25,0
 256 00de 01F4      		brne 1b
 257 00e0 00C0      		rjmp .
 258 00e2 0000      		nop
 259               	.LBE36:
 260               	.LBE35:
  89:main.c        **** 	
  90:main.c        **** 	//we should never reach this point in the real application because device should be turned off  no
  91:main.c        **** 	_delay_ms(250);
  92:main.c        **** 	
  93:main.c        **** 	PORTB &= ~(1<<PORTB3);
 261               		.loc 1 93 0
 262 00e4 C398      		cbi 0x18,3
 263 00e6 0895      		ret
 264               		.cfi_endproc
 265               	.LFE10:
 267               	.global	flashWarning
 269               	flashWarning:
 270               	.LFB11:
  94:main.c        **** 
  95:main.c        **** }
  96:main.c        **** 
  97:main.c        **** void flashWarning() {
 271               		.loc 1 97 0
 272               		.cfi_startproc
 273               	/* prologue: function */
 274               	/* frame size = 0 */
 275               	/* stack size = 0 */
 276               	.L__stack_usage = 0
  98:main.c        **** 
  99:main.c        **** 	
 100:main.c        **** 	PORTB |= (1<<PORTB4);
 277               		.loc 1 100 0
 278 00e8 C49A      		sbi 0x18,4
 279               	.LVL9:
 280               	.LBB37:
 281               	.LBB38:
 282               		.loc 2 163 0
 283 00ea 2FEF      		ldi r18,lo8(959999)
 284 00ec 85EA      		ldi r24,hi8(959999)
 285 00ee 9EE0      		ldi r25,hlo8(959999)
 286 00f0 2150      	1:	subi r18,1
 287 00f2 8040      		sbci r24,0
 288 00f4 9040      		sbci r25,0
 289 00f6 01F4      		brne 1b
 290 00f8 00C0      		rjmp .
 291 00fa 0000      		nop
 292               	.LBE38:
 293               	.LBE37:
 101:main.c        **** 	
 102:main.c        **** 	_delay_ms(500);
 103:main.c        **** 	
 104:main.c        **** 	PORTB &= ~(1<<PORTB4);
 294               		.loc 1 104 0
 295 00fc C498      		cbi 0x18,4
 296               	.LVL10:
 297               	.LBB39:
 298               	.LBB40:
 299               		.loc 2 163 0
 300 00fe 2FEF      		ldi r18,lo8(959999)
 301 0100 85EA      		ldi r24,hi8(959999)
 302 0102 9EE0      		ldi r25,hlo8(959999)
 303 0104 2150      	1:	subi r18,1
 304 0106 8040      		sbci r24,0
 305 0108 9040      		sbci r25,0
 306 010a 01F4      		brne 1b
 307 010c 00C0      		rjmp .
 308 010e 0000      		nop
 309 0110 0895      		ret
 310               	.LBE40:
 311               	.LBE39:
 312               		.cfi_endproc
 313               	.LFE11:
 315               		.section	.text.startup,"ax",@progbits
 316               	.global	main
 318               	main:
 319               	.LFB12:
 105:main.c        **** 	
 106:main.c        **** 	_delay_ms(500);
 107:main.c        **** 
 108:main.c        **** 
 109:main.c        **** }
 110:main.c        **** 
 111:main.c        **** 
 112:main.c        **** 
 113:main.c        **** int main(void)
 114:main.c        **** {
 320               		.loc 1 114 0
 321               		.cfi_startproc
 322               	/* prologue: function */
 323               	/* frame size = 0 */
 324               	/* stack size = 0 */
 325               	.L__stack_usage = 0
 115:main.c        **** 
 116:main.c        **** 	//set b3 and b4 as outputs (mosfets)
 117:main.c        **** 	DDRB |= (1<<DDB3 | 1<<DDB4);
 326               		.loc 1 117 0
 327 0000 87B3      		in r24,0x17
 328 0002 8861      		ori r24,lo8(24)
 329 0004 87BB      		out 0x17,r24
 118:main.c        **** 
 119:main.c        **** 	//set b3 and b4 low
 120:main.c        **** 	PORTB &= ~(1<<PORTB3 | 1<<PORTB4);
 330               		.loc 1 120 0
 331 0006 88B3      		in r24,0x18
 332 0008 877E      		andi r24,lo8(-25)
 333 000a 88BB      		out 0x18,r24
 121:main.c        **** 	
 122:main.c        **** 	//set frame variable to all zero
 123:main.c        **** 	clearFrame();
 334               		.loc 1 123 0
 335 000c 00D0      		rcall clearFrame
 336               	.LVL11:
 124:main.c        **** 	
 125:main.c        **** 	pulseVibrationShort();
 337               		.loc 1 125 0
 338 000e 00D0      		rcall pulseVibrationShort
 339               	.LVL12:
 340               	.LBB41:
 341               	.LBB42:
 342               		.loc 2 163 0
 343 0010 2FEF      		ldi r18,lo8(191999)
 344 0012 8DEE      		ldi r24,hi8(191999)
 345 0014 92E0      		ldi r25,hlo8(191999)
 346 0016 2150      	1:	subi r18,1
 347 0018 8040      		sbci r24,0
 348 001a 9040      		sbci r25,0
 349 001c 01F4      		brne 1b
 350 001e 00C0      		rjmp .
 351 0020 0000      		nop
 352               	.LBE42:
 353               	.LBE41:
 126:main.c        **** 	_delay_ms(100);
 127:main.c        **** 	pulseVibrationShort();
 354               		.loc 1 127 0
 355 0022 00D0      		rcall pulseVibrationShort
 356               	.LVL13:
 128:main.c        **** 	
 129:main.c        **** 	playStartAnimation();
 357               		.loc 1 129 0
 358 0024 00D0      		rcall playStartAnimation
 359               	.LVL14:
 130:main.c        **** 	
 131:main.c        **** 	pulseVibration();
 360               		.loc 1 131 0
 361 0026 00D0      		rcall pulseVibration
 362               	.LVL15:
 363               	.LBB43:
 364               	.LBB44:
 365               		.loc 2 163 0
 366 0028 2FEF      		ldi r18,lo8(383999)
 367 002a 8BED      		ldi r24,hi8(383999)
 368 002c 95E0      		ldi r25,hlo8(383999)
 369 002e 2150      	1:	subi r18,1
 370 0030 8040      		sbci r24,0
 371 0032 9040      		sbci r25,0
 372 0034 01F4      		brne 1b
 373 0036 00C0      		rjmp .
 374 0038 0000      		nop
 375               	.LBE44:
 376               	.LBE43:
 132:main.c        **** 	_delay_ms(200);
 133:main.c        **** 	pulseVibration();
 377               		.loc 1 133 0
 378 003a 00D0      		rcall pulseVibration
 379               	.LVL16:
 380               	.LBB45:
 381               	.LBB46:
 382               		.loc 2 163 0
 383 003c 2FEF      		ldi r18,lo8(959999)
 384 003e 85EA      		ldi r24,hi8(959999)
 385 0040 9EE0      		ldi r25,hlo8(959999)
 386 0042 2150      	1:	subi r18,1
 387 0044 8040      		sbci r24,0
 388 0046 9040      		sbci r25,0
 389 0048 01F4      		brne 1b
 390 004a 00C0      		rjmp .
 391 004c 0000      		nop
 392               	.LBE46:
 393               	.LBE45:
 134:main.c        **** 	
 135:main.c        **** 	_delay_ms(500);
 136:main.c        **** 	
 137:main.c        **** 	turnOff();
 394               		.loc 1 137 0
 395 004e 00D0      		rcall turnOff
 396               	.LVL17:
 397               	.L11:
 138:main.c        **** 	
 139:main.c        **** 	
 140:main.c        **** 	while(1) flashWarning();
 398               		.loc 1 140 0 discriminator 1
 399 0050 00D0      		rcall flashWarning
 400               	.LVL18:
 401 0052 00C0      		rjmp .L11
 402               		.cfi_endproc
 403               	.LFE12:
 405               		.comm	ledFrame,24,1
 406               		.text
 407               	.Letext0:
 408               		.file 3 "/usr/lib/avr/include/stdint.h"
 409               		.file 4 "ws2812/light/light_ws2812.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccZh0Kbx.s:2      *ABS*:000000000000003d __SP_L__
     /tmp/ccZh0Kbx.s:3      *ABS*:000000000000003f __SREG__
     /tmp/ccZh0Kbx.s:4      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccZh0Kbx.s:5      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccZh0Kbx.s:11     .text:0000000000000000 clearFrame
                            *COM*:0000000000000018 ledFrame
     /tmp/ccZh0Kbx.s:47     .text:000000000000001a playStartAnimation
     /tmp/ccZh0Kbx.s:170    .text:00000000000000a0 pulseVibration
     /tmp/ccZh0Kbx.s:203    .text:00000000000000b8 pulseVibrationShort
     /tmp/ccZh0Kbx.s:236    .text:00000000000000d0 turnOff
     /tmp/ccZh0Kbx.s:269    .text:00000000000000e8 flashWarning
     /tmp/ccZh0Kbx.s:318    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
ws2812_setleds
__do_clear_bss
